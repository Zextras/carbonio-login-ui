### login SUPPORTED
GET /zx/login/supported HTTP/1.1
Host: infra-27852980.testarea.zextras.com

> {%
client.test("'supported' executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Content-type is not json")
  client.assert(response.body.hasOwnProperty("minApiVersion"), "Response don't have minApiVersion");
  client.assert(response.body.hasOwnProperty("maxApiVersion"), "Response don't have maxApiVersion");
});
client.global.set("version", response.body.minApiVersion);
%}

### auth SUPPORTED
GET infra-27852980.testarea.zextras.com/zx/auth/supported?domain=zimbra.com HTTP/1.1

> {%

client.test("'supported' executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Content-type is not json")
  client.assert(response.body.hasOwnProperty("minApiVersion"), "Response don't have minApiVersion");
  client.assert(response.body.hasOwnProperty("maxApiVersion"), "Response don't have maxApiVersion");
});
if(response.body.hasOwnProperty("version")) {
    client.global.set("version", response.body.minApiVersion);
}
%}

###
GET /zx/login/v{{version}}/config?domain=zimbra.com HTTP/1.1
Host: infra-27852980.testarea.zextras.com

> {%
client.test("'supported' executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Content-type is not json")
  client.assert(response.body.hasOwnProperty("zimbraDomainName"), "Response don't have zimbraDomainName");
  client.assert(response.body.hasOwnProperty("zimbraPublicServiceHostname"), "Response don't have zimbraPublicServiceHostname");
  client.assert(response.body.hasOwnProperty("zimbraPublicServicePort"), "Response don't have zimbraPublicServicePort");
  client.assert(response.body.hasOwnProperty("zimbraPublicServiceProtocol"), "Response don't have zimbraPublicServiceProtocol");
  client.assert(response.body.hasOwnProperty("zimbraSkinLogoURL"), "Response don't have zimbraSkinLogoURL");

  // https://zextras.atlassian.net/wiki/spaces/COR/pages/826212445/Zextras+Login+Page

  client.assert(response.body.hasOwnProperty("loginPageBackgroundImage"), "Response don't have loginPageBackgroundImage");
  client.assert(response.body.hasOwnProperty("loginPageLogo"), "Response don't have loginPageLogo");
  client.assert(response.body.hasOwnProperty("loginPageColorSet"), "Response don't have loginPageColorSet");

  // some field are missing w.r.t. documentation
});
%}

### V1 LOGIN
POST https://infra-27852980.testarea.zextras.com/zx/auth/v{{version}}/login
Content-Type: application/json
X-Device-Model: Apple iPhone/iOS 13.2.3
X-Service: ZimbraUI
X-Device-Id: 1231231231412

{
  "auth_method": "PASSWORD",
  "user": "luca.allegro@zextras.com",
  "password": "at362LZPC"
}

> {%
client.test("'auth v1 LOGIN' executed successfully", function() {
  client.assert(response.status === 401, "Response status is not Unauthorized");
});
 %}